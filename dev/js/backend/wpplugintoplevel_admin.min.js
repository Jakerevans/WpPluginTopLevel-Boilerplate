/**
 * JavaScript Admin Functions - wpplugintoplevel-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in the wpplugintoplevel Admin JavaScript file:' );
console.log( wppluginToplevelPhpVariables );


// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	wppluginToplevelAdminPointersJavascript();

	// Function that will handle the saving of the user's License Key.
	wppluginToplevelPluginPageDashboardSaveKey();

	// Function for expanding the 'Edit and Delete Websites' section. 
	wppluginToplevelExpandToEdit();

	// Function for enabling the 'Choose Image' button on the "Create A User" page.
	wppluginToplevelUserImageFileUpload();

	// Function for manually adding a new user from the dashboard. 
	wppluginToplevelAddNewUser();

	// Function for making sure some data is masked correctly in input fields (mostly telephone nunmbers and dates).
	//masking();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	function masking(){
		var phoneMask = IMask(
			document.getElementById('wpplugin-form-contactphone'), {
		    mask: '(000) 000-0000'
		});
	}

	// Function for expanding the 'Edit and Delete Websites' section. 
	function wppluginToplevelExpandToEdit(){
		$( document ).on( 'click', '.wpplugintoplevel-SITETHING-update-container-accordion-heading', function( event ) {
			if ( 'true' === $( this ).next().attr('data-open') ) {
				$( this ).next().css({'display':'none'})
				$( this ).next().attr('data-open','false')
			} else {
				$( this ).next().css({'display':'block'})
				$( this ).next().attr('data-open','true')
			}
		});
	}


	// Function that will handle the saving of the user's License Key.
	function wppluginToplevelPluginPageDashboardSaveKey() {

		// When the 'Save' button is clicked at the top of the dashboard...
		$( '#wpplugin-extension-genreric-key-dashboard-form-toplevel' ).on( 'submit', function() {

			var license = $( '#wpplugin-extension-genreric-key-dashboard-input-toplevel' ).val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpplugintoplevel_save_license_key_action',
				'security': wppluginToplevelPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});


			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});

		// When the 'Save' button is clicked from the plugin's entry...
		$( '#wpplugin-extension-genreric-key-plugins-page-button-toplevel' ).on( 'click', function() {

			var license = $( this ).prev().val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpplugintoplevel_save_license_key_action',
				'security': wppluginToplevelPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for manually adding a new user from the dashboard. 
	function wppluginToplevelAddNewUser(){
		$( document ).on( 'click', '#wpplugin-form-section-add-new-user-button', function( event ) {

			// Get all the data to add a Student
			var firstname = $('#wpplugin-user-firstname').val();
			var lastname = $('#wpplugin-user-lastname').val();
			var contactstreetaddress = $('#wpplugin-user-streetaddress').val();
			var contactcity = $('#wpplugin-user-city').val();
			var contactstate = $('#wpplugin-user-state').val();
			var contactzip = $('#wpplugin-user-zip').val();
			var phonecell = $('#wpplugin-user-cellphone').val();
			var phoneoffice = $('#wpplugin-user-officephone').val();
			var email = $('#wpplugin-user-email').val();
			var userimage1 = $('#wpplugin-user-image1').val();
			var userimage2 = $('#wpplugin-user-image2').val();
			var comments = $('#wpplugin-user-comments').val();

			// Make some checks for required data.
			var proceed_flag = true;
			if ( ( '' === email ) || ( null === email ) || ( undefined === email ) ) {
				proceed_flag = false;
				$('.wpplugin-response-div-p').text( 'Whoops! Looks like you forgot to provide a valid Email address!' );
			}

			if ( proceed_flag ) {

				$('.wpplugin-spinner').animate({'opacity':'1'});

				// Make Ajax call to get display options.
				var data = {
					'action': 'wpplugintoplevel_add_new_user_action',
					'security': wppluginToplevelPhpVariables.adminnonce2,
					'firstname': firstname,
					'lastname': lastname,
					'contactstreetaddress': contactstreetaddress,
					'contactcity': contactcity,
					'contactstate': contactstate,
					'contactzip': contactzip,
					'phonecell': phonecell,
					'phoneoffice': phoneoffice,
					'email': email,
					'userimage1': userimage1,
					'userimage2': userimage2,
					'comments': comments,
				};

				console.log(data);

				$.post( ajaxurl, data, function( response ) {
					$('.wpplugin-spinner').animate({'opacity':'0'});

					if ( '1' !== response ) {
						$('.wpplugin-response-div-p').text( response );
					} else {
						$('.wpplugin-response-div-p').text( 'Success! You\'ve just added a new user to the QCI Database. Good Job!' );
					}
					console.log(response);
					//document.location.reload( true );

				});


			}


		});
	}




	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function wppluginToplevelAdminPointersJavascript() {

		$( 'body' ).on( 'mouseenter', '.wpplugin-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + wppluginPhpVariables.trans135 + '</h3><p class="wpplugin-admin-pointer">' + wppluginPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave.
			$( 'body' ).on( 'mouseleave', '.wpplugin-icon-image-question', function() {
				pointer.pointer( 'close' );
			});

		});

		$( 'body' ).on( 'mouseenter', '.wpplugin-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wppluginPhpVariables.trans203 + '</h3><p class="wpplugin-admin-pointer">' + wppluginPhpVariables.trans204 + wppluginPhpVariables.SETTINGS_PAGE_URL + wppluginPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}

	// Function for enabling the 'Choose Image' button on the "Create A User" page.
	function wppluginToplevelUserImageFileUpload() {

		var fileFrame;
		var wpMediaPostId = 0;
		var setToPostId = 0;

		// Must be parsed to an int! All the whitetailwarriorsPhpVariables are strings initially.
		setToPostId = 0;

		$( document ).on( 'click', '.wpplugin-form-section-placeholder-image-button', function( event ) {
			var thisbutton = $( this );
			event.preventDefault();
			// Create the media frame.
			fileFrame = wp.media.frames.fileFrame = wp.media({
				title: 'Select an Existing File From the Media Library or Upload a New One',
				button: {
					text: 'Select This File',
				},
				multiple: false
			});

			// When an image is selected, run a callback.
			fileFrame.on( 'select', function() {

				// We set multiple to false so only get one image from the uploader
				var attachment = fileFrame.state().get( 'selection' ).first().toJSON();

				// Do something with attachment.id and/or attachment.url here
				thisbutton.prev().val( attachment.url );
				thisbutton.prev().prev().find('img').attr( 'src', attachment.url );
			});

			// Finally, open the modal
			fileFrame.open();
		});

	}
});
