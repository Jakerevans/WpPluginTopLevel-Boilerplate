/**
 * JavaScript Admin Functions - wpplugintoplevel-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in the wpplugintoplevel Admin JavaScript file:' );
console.log( wppluginToplevelPhpVariables );


// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	wppluginToplevelAdminPointersJavascript();

	// Function that will handle the saving of the user's License Key.
	wppluginToplevelPluginPageDashboardSaveKey();

	// Function for enabling the 'Choose Image' button on the "Create A User" page.
	wppluginToplevelUserImageFileUpload();

	// Function for manually adding a new user from the dashboard. 
	wppluginToplevelAddNewUser();

	// To allow for the expansion of users, when editing users.
	wppluginToplevelEditUserExpandAccordian();

	// To accomplish the editing of users.
	wppluginToplevelEditUserActual();

	// Function for making sure some data is masked correctly in input fields (mostly telephone nunmbers and dates).
	//masking();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */




	function masking(){
		var phoneMask = IMask(
			document.getElementById('wpplugin-form-contactphone'), {
		    mask: '(000) 000-0000'
		});
	}

	// To accomplish the editing of users.
	function wppluginToplevelEditUserActual() {

		// Binding to trigger checkPasswordStrength
		$( 'body' ).on( 'keyup', '.wpplugin-form-wrapper-edit-users input[name=password], .wpplugin-form-wrapper-edit-users input[name=password_retyped]',
		    function( event ) {
		    	var id =  $(this).attr('data-id');
		        wppluginToplevelCheckPasswordStrengthEditUsers(
		            $('#wpplugin-user-password-' + id ),         // First password field
		            $('#wpplugin-user-passwordverify-' + id ),  // Second password field
		            $('#password-strength-' + id ),           // Strength meter
		            $('#wpplugin-form-section-add-new-user-button'),           // Submit button
		            ['black', 'listed', 'word']        // Blacklisted words
		        );
		    }
		);

		$( document ).on( 'click', '.wpplugin-form-section-submit-edits-button', function( event ) {
			var id = $(this).attr('data-userid');
			var wpuserid = $(this).attr('data-wpuserid');
			var username = $(this).parent().parent().parent().find('#wpplugin-user-username').val();
			var password = $(this).parent().parent().parent().find('#wpplugin-user-password-' + id).val();
			var passwordverify = $(this).parent().parent().parent().find('#wpplugin-user-passwordverify-' + id).val();
			var firstname = $(this).parent().parent().parent().find('#wpplugin-user-firstname').val();
			var lastname = $(this).parent().parent().parent().find('#wpplugin-user-lastname').val();
			var contactstreetaddress = $(this).parent().parent().parent().find('#wpplugin-user-streetaddress').val();
			var contactcity = $(this).parent().parent().parent().find('#wpplugin-user-city').val();
			var contactstate = $(this).parent().parent().parent().find('#wpplugin-user-state').val();
			var contactzip = $(this).parent().parent().parent().find('#wpplugin-user-zip').val();
			var phonecell = $(this).parent().parent().parent().find('#wpplugin-user-cellphone').val();
			var phoneoffice = $(this).parent().parent().parent().find('#wpplugin-user-officephone').val();
			var email = $(this).parent().parent().parent().find('#wpplugin-user-email').val();
			var userimage1 = $(this).parent().parent().parent().find('#wpplugin-user-image1').val();
			var userimage2 = $(this).parent().parent().parent().find('#wpplugin-user-image2').val();
			var comments = $(this).parent().parent().parent().find('#wpplugin-user-comments').val();

			// Make some checks for required data.
			var proceed_flag = true;
			if ( ( '' === email ) || ( null === email ) || ( undefined === email ) ) {
				proceed_flag = false;
				$('.wpplugin-response-div-p').text( 'Whoops! Looks like you forgot to provide a valid Email address!' );
			}

			// Making sure passwords match
            if ( password !== passwordverify ) {
                proceed_flag = false;
                $('#wpplugin-response-div-p-' + id).text( 'Whoops! Looks like your passwords don\'t match!' );
                $( '#wpplugin-user-password-' + id + ', #wpplugin-user-passwordverify-' + id ).css({'color':'red'});
                return false;
            }

            if ( 'Password Strength too low!' === $( '#password-strength-' + id ).html() ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Please create a stronger password!' );
                $( '#wpplugin-user-password, #wpplugin-user-passwordverify' ).css({'color':'red'});
                return false;
            }

			if ( proceed_flag ) {

				$('.wpplugin-spinner').animate({'opacity':'1'});

				// Make Ajax call to get display options.
				var data = {
					'action': 'wpplugintoplevel_edit_existing_user_action',
					'security': wppluginToplevelPhpVariables.adminnonce4,
					'username': username,
					'id': id,
					'wpuserid': wpuserid,
					'password': password,
					'firstname': firstname,
					'lastname': lastname,
					'contactstreetaddress': contactstreetaddress,
					'contactcity': contactcity,
					'contactstate': contactstate,
					'contactzip': contactzip,
					'phonecell': phonecell,
					'phoneoffice': phoneoffice,
					'email': email,
					'userimage1': userimage1,
					'userimage2': userimage2,
					'location': 'backend',
				};

				console.log(data);

				$.post( ajaxurl, data, function( response ) {
					$('.wpplugin-spinner').animate({'opacity':'0'});
					
					// Trying to use an already-registered email address or username.
                    if ( 'Whoops! Looks like someone is already registered with this Email Address!' === response ) {
                        $('#wpplugin-response-div-p-' + data.id).text( response );
                        return false;
                    }else if ( 'Whoops! Looks like this Username is already taken!' === response ) {
                        $('.wpplugin-response-div-p').text( response );
                        return false;
                    } else {
                        $('.wpplugin-response-div-p').text( 'Success! You\'ve just edited this User!' );
                    }
                    

				});


			}
				console.log(data);

		});


	}






	// To allow for the expansion of users, when editing users.
	function wppluginToplevelEditUserExpandAccordian() {
		$( document ).on( 'click', '.wpplugin-users-update-container-accordion-heading', function( event ) {

			var expandedstatus = $( this ).attr( 'data-expandedstatus' );
			var elementtoexpand = $( this ).next();

			if ( 'true' === expandedstatus ) {
				console.log('in true')

				// Animate to 0 Height.
				elementtoexpand.animate({
					height: 0,
					opacity:0
				}, {
					duration: 1000,
				});

				$( this ).attr( 'data-expandedstatus', 'false' );
			} else {

				console.log('in false')

				// Get Auto Height.
				var autoHeight = elementtoexpand.css('height', 'auto').height(); 

				// Reset to Default Height.
				elementtoexpand.height(0);

				// Animate to Auto Height.
				elementtoexpand.stop().animate({
					height: autoHeight+50,
					opacity:1
				}, {
					duration: 1000,
					complete: function() {
						elementtoexpand.css({'height': 'auto'});
					}
				});

				$( this ).attr( 'data-expandedstatus', 'true' );
			}

		});
	}

	function wppluginToplevelCheckPasswordStrength( $pass1, $pass2, $strengthResult, $submitButton, blacklistArray ) {
        var pass1 = $pass1.val();
        var pass2 = $pass2.val();

        // Reset the form & meter
        $strengthResult.css({'opacity':'1'})
        $strengthResult.removeClass( 'short bad good strong' );

        // Extend our blacklist array with those from the inputs & site data
        blacklistArray = blacklistArray.concat( wp.passwordStrength.userInputDisallowedList() )

        // Get the password strength
        var strength = wp.passwordStrength.meter( pass1, blacklistArray, pass2 );

        // Add the strength meter results
        switch ( strength ) {

            case 2:
                $strengthResult.addClass( 'bad' ).html( "Password Strength too low!" );
                break;

            case 3:
                $strengthResult.addClass( 'good' ).html( "Medium Password Strength" );
                break;

            case 4:
                $strengthResult.addClass( 'strong' ).html( "Great Password!" );
                break;

            case 5:
                $strengthResult.addClass( 'short' ).html( "Passwords Don't Match!" );
                break;

            default:
                $strengthResult.addClass( 'short' ).html( "Password Strength too low!" );

        }

        return strength;
    }

    function wppluginToplevelCheckPasswordStrengthEditUsers( $pass1, $pass2, $strengthResult, $submitButton, blacklistArray ) {
        var pass1 = $pass1.val();
        var pass2 = $pass2.val();

        // Reset the form & meter
        $strengthResult.css({'opacity':'1'})
        $strengthResult.removeClass( 'short bad good strong' );

        // Extend our blacklist array with those from the inputs & site data
        blacklistArray = blacklistArray.concat( wp.passwordStrength.userInputDisallowedList() )

        // Get the password strength
        var strength = wp.passwordStrength.meter( pass1, blacklistArray, pass2 );

        // Add the strength meter results
        switch ( strength ) {

            case 2:
                $strengthResult.addClass( 'bad' ).html( "Password Strength too low!" );
                break;

            case 3:
                $strengthResult.addClass( 'good' ).html( "Medium Password Strength" );
                break;

            case 4:
                $strengthResult.addClass( 'strong' ).html( "Great Password!" );
                break;

            case 5:
                $strengthResult.addClass( 'short' ).html( "Passwords Don't Match!" );
                break;

            default:
                $strengthResult.addClass( 'short' ).html( "Password Strength too low!" );

        }

        if ( '' === pass1 && '' === pass2 ) {
        	$strengthResult.addClass( 'short' ).html( "Password Strength is..." );
        	$strengthResult.css({'opacity':'0'});
        }

        return strength;
    }


	// Function that will handle the saving of the user's License Key.
	function wppluginToplevelPluginPageDashboardSaveKey() {

		// When the 'Save' button is clicked at the top of the dashboard...
		$( '#wpplugin-extension-genreric-key-dashboard-form-toplevel' ).on( 'submit', function() {

			var license = $( '#wpplugin-extension-genreric-key-dashboard-input-toplevel' ).val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpplugintoplevel_save_license_key_action',
				'security': wppluginToplevelPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});


			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});

		// When the 'Save' button is clicked from the plugin's entry...
		$( '#wpplugin-extension-genreric-key-plugins-page-button-toplevel' ).on( 'click', function() {

			var license = $( this ).prev().val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'wpplugintoplevel_save_license_key_action',
				'security': wppluginToplevelPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for manually adding a new user from the dashboard. 
	function wppluginToplevelAddNewUser(){

		$( document ).on( 'click', '.wpplugin-form-section-wrapper input, .wpplugin-form-section-wrapper select', function( event ) {
		    $( '.wpplugin-form-section-wrapper input' ).css({'color':'inherit'});
		});

		// Binding to trigger checkPasswordStrength
		$( 'body' ).on( 'keyup', '.wpplugin-form-wrapper-create-users input[name=password], .wpplugin-form-wrapper-create-users input[name=password_retyped]',
		    function( event ) {
		        wppluginToplevelCheckPasswordStrength(
		            $('input[name=password]'),         // First password field
		            $('input[name=password_retyped]'), // Second password field
		            $('#password-strength'),           // Strength meter
		            $('#wpplugin-form-section-add-new-user-button'),           // Submit button
		            ['black', 'listed', 'word']        // Blacklisted words
		        );
		    }
		);

		$( document ).on( 'click', '#wpplugin-form-section-add-new-user-button', function( event ) {

			// Get all the data to add a Student
			var username = $('#wpplugin-user-username').val();
			var password = $('#wpplugin-user-password').val();
			var passwordverify = $('#wpplugin-user-passwordverify').val();
			var firstname = $('#wpplugin-user-firstname').val();
			var lastname = $('#wpplugin-user-lastname').val();
			var contactstreetaddress = $('#wpplugin-user-streetaddress').val();
			var contactcity = $('#wpplugin-user-city').val();
			var contactstate = $('#wpplugin-user-state').val();
			var contactzip = $('#wpplugin-user-zip').val();
			var phonecell = $('#wpplugin-user-cellphone').val();
			var phoneoffice = $('#wpplugin-user-officephone').val();
			var email = $('#wpplugin-user-email').val();
			var userimage1 = $('#wpplugin-user-image1').val();
			var userimage2 = $('#wpplugin-user-image2').val();
			var comments = $('#wpplugin-user-comments').val();

			// Make some checks for required data.
			var proceed_flag = true;
			if ( ( '' === email ) || ( null === email ) || ( undefined === email ) ) {
				proceed_flag = false;
				$('.wpplugin-response-div-p').text( 'Whoops! Looks like you forgot to provide a valid Email address!' );
			}

			// Making sure passwords match...
            if ( password !== passwordverify ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Looks like your passwords don\'t match!' );
                $( '#wpplugin-user-password, #wpplugin-user-passwordverify' ).css({'color':'red'});
                return false;
            }

            if ( 'Password Strength is...' === $( '#password-strength' ).html() ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Looks like you forgot to choose a password!' );
                $( '#wpplugin-user-password, #wpplugin-user-passwordverify' ).css({'color':'red'});
                return false;
            }

            if ( 'Password Strength too low!' === $( '#password-strength' ).html() ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Please create a stronger password!' );
                $( '#wpplugin-user-password, #wpplugin-user-passwordverify' ).css({'color':'red'});
                return false;
            }

			if ( proceed_flag ) {

				$('.wpplugin-spinner').animate({'opacity':'1'});

				// Make Ajax call to get display options.
				var data = {
					'action': 'wpplugintoplevel_add_new_user_action',
					'security': wppluginToplevelPhpVariables.adminnonce2,
					'username': username,
					'password': password,
					'firstname': firstname,
					'lastname': lastname,
					'contactstreetaddress': contactstreetaddress,
					'contactcity': contactcity,
					'contactstate': contactstate,
					'contactzip': contactzip,
					'phonecell': phonecell,
					'phoneoffice': phoneoffice,
					'email': email,
					'userimage1': userimage1,
					'userimage2': userimage2,
					'location': 'backend',
				};

				console.log(data);

				$.post( ajaxurl, data, function( response ) {
					$('.wpplugin-spinner').animate({'opacity':'0'});

					// Trying to use an already-registered email address or username.
                    if ( 'Whoops! Looks like someone is already registered with this Email Address!' === response ) {
                        $('.wpplugin-response-div-p').text( response );
                        return false;
                    }else if ( 'Whoops! Looks like this Username is already taken!' === response ) {
                        $('.wpplugin-response-div-p').text( response );
                        return false;
                    } else {
                        $('.wpplugin-response-div-p').text( 'Success! You\'ve just added a new User!' );
                    }

				});


			}


		});
	}




	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function wppluginToplevelAdminPointersJavascript() {

		$( 'body' ).on( 'mouseenter', '.wpplugin-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + wppluginPhpVariables.trans135 + '</h3><p class="wpplugin-admin-pointer">' + wppluginPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave.
			$( 'body' ).on( 'mouseleave', '.wpplugin-icon-image-question', function() {
				pointer.pointer( 'close' );
			});

		});

		$( 'body' ).on( 'mouseenter', '.wpplugin-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wppluginPhpVariables.trans203 + '</h3><p class="wpplugin-admin-pointer">' + wppluginPhpVariables.trans204 + wppluginPhpVariables.SETTINGS_PAGE_URL + wppluginPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}

	// Function for enabling the 'Choose Image' button on the "Create A User" page.
	function wppluginToplevelUserImageFileUpload() {

		var fileFrame;
		var wpMediaPostId = 0;
		var setToPostId = 0;

		// Must be parsed to an int! All the whitetailwarriorsPhpVariables are strings initially.
		setToPostId = 0;

		$( document ).on( 'click', '.wpplugin-form-section-placeholder-image-button', function( event ) {
			var thisbutton = $( this );
			event.preventDefault();
			// Create the media frame.
			fileFrame = wp.media.frames.fileFrame = wp.media({
				title: 'Select an Existing File From the Media Library or Upload a New One',
				button: {
					text: 'Select This File',
				},
				multiple: false
			});

			// When an image is selected, run a callback.
			fileFrame.on( 'select', function() {

				// We set multiple to false so only get one image from the uploader
				var attachment = fileFrame.state().get( 'selection' ).first().toJSON();

				// Do something with attachment.id and/or attachment.url here
				thisbutton.prev().val( attachment.url );
				thisbutton.prev().prev().find('img').attr( 'src', attachment.url );
			});

			// Finally, open the modal
			fileFrame.open();
		});

	}

	// To allow for the navigating back, forward, and to a particular page of database Results.
	function wppluginToplevelPrevNextPageSelectNext(){
		$( document ).on( 'click', '#wppluginToplevel-nextpage', function( event ) {
			var currentpage = $( this ).attr( 'data-currentpn' );
			var pagelimit = $( this ).attr( 'data-pagelimit' );
			var newurl = new URL(window.location.href);
			var params = newurl.searchParams;
			params.set("pn", parseInt( currentpage ) + parseInt( pagelimit )), ( newurl.search = params.toString());
			var url = newurl.toString();
			window.location.href = url;
		});
	}

	// To allow for the navigating back, forward, and to a particular page of Sutdent Results.
	function wppluginToplevelPrevNextPageSelectPrev(){
		$( document ).on( 'click', '#wppluginToplevel-previouspage', function( event ) {
			var currentpage = $( this ).attr( 'data-currentpn' );
			var pagelimit = $( this ).attr( 'data-pagelimit' );
			var newurl = new URL(window.location.href);
			var params = newurl.searchParams;
			params.set("pn", parseInt( currentpage ) - parseInt( pagelimit )), ( newurl.search = params.toString());
			var url = newurl.toString();
			window.location.href = url;
		});
	}

	// To allow for the navigating back, forward, and to a particular page of Sutdent Results.
	function wppluginToplevelPrevNextPageSelectPage(){
		$( document ).on( 'change', '#wppluginToplevel-pageselect', function( event ) {
			$(this).attr("data-currentpn");
            var e = $(this).attr("data-pagelimit"),
                n = $(this).val();
            console.log(n);
            var r = new URL(window.location.href),
                a = r.searchParams,
                i = n * e;
            a.set("pn", (i - 40)), (r.search = a.toString());
            var o = r.toString();
            window.location.href = o;
		});
	}
});
