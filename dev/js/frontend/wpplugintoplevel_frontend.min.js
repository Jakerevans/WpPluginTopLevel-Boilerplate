/**
 * JavaScript Admin Functions - wpplugintoplevel-frontend.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in the wpplugintoplevel Front-End JavaScript file:' );
console.log( wppluginToplevelPhpVariables );


// All functions wrapped in jQuery(document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function for manually adding a new user from the front-end. 
    wppluginToplevelAddNewUser();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

    function checkPasswordStrength( $pass1, $pass2, $strengthResult, $submitButton, blacklistArray ) {
            var pass1 = $pass1.val();
        var pass2 = $pass2.val();

        // Reset the form & meter
        $submitButton.attr( 'disabled', 'disabled' );
            $strengthResult.removeClass( 'short bad good strong' );

        // Extend our blacklist array with those from the inputs & site data
        blacklistArray = blacklistArray.concat( wp.passwordStrength.userInputDisallowedList() )

        // Get the password strength
        var strength = wp.passwordStrength.meter( pass1, blacklistArray, pass2 );

        // Add the strength meter results
        switch ( strength ) {

            case 2:
                $strengthResult.addClass( 'bad' ).html( pwsL10n.bad );
                break;

            case 3:
                $strengthResult.addClass( 'good' ).html( pwsL10n.good );
                break;

            case 4:
                $strengthResult.addClass( 'strong' ).html( pwsL10n.strong );
                break;

            case 5:
                $strengthResult.addClass( 'short' ).html( pwsL10n.mismatch );
                break;

            default:
                $strengthResult.addClass( 'short' ).html( pwsL10n.short );

        }

        // The meter function returns a result even if pass2 is empty,
        // enable only the submit button if the password is strong and
        // both passwords are filled up
        if ( 4 === strength && '' !== pass2.trim() ) {
            $submitButton.removeAttr( 'disabled' );
        }

        return strength;
    }


    // Function for manually adding a new user from the dashboard. 
    function wppluginToplevelAddNewUser(){

        $( document ).on( 'click', '#wpplugin-not-registered-top-container input, #wpplugin-not-registered-top-container select', function( event ) {
            $( '#wpplugin-not-registered-top-container input' ).css({'color':'inherit'});
        });

         // Binding to trigger checkPasswordStrength
        $( 'body' ).on( 'keyup', 'input[name=password], input[name=password_retyped]',
            function( event ) {
                checkPasswordStrength(
                    $('input[name=password]'),         // First password field
                    $('input[name=password_retyped]'), // Second password field
                    $('#password-strength'),           // Strength meter
                    $('#wpplugin-form-section-add-new-user-button'),           // Submit button
                    ['black', 'listed', 'word']        // Blacklisted words
                );
            }
        );

        
        $( document ).on( 'click', '#wpplugin-form-section-add-new-user-button', function( event ) {

            // Get all the data to add a Student
            var username = $('#wpplugin-user-username').val();
            var password = $('#wpplugin-user-password').val();
            var passwordverify = $('#wpplugin-user-passwordverify').val();
            var firstname = $('#wpplugin-user-firstname').val();
            var lastname = $('#wpplugin-user-lastname').val();
            var contactstreetaddress = $('#wpplugin-user-streetaddress').val();
            var contactcity = $('#wpplugin-user-city').val();
            var contactstate = $('#wpplugin-user-state').val();
            var contactzip = $('#wpplugin-user-zip').val();
            var phonecell = $('#wpplugin-user-cellphone').val();
            var phoneoffice = $('#wpplugin-user-officephone').val();
            var email = $('#wpplugin-user-email').val();
            var userimage1 = $('#wpplugin-user-image1').val();
            var userimage2 = $('#wpplugin-user-image2').val();
            var comments = $('#wpplugin-user-comments').val();

            // Make some checks for required data.
            var proceed_flag = true;
            if ( ( '' === email ) || ( null === email ) || ( undefined === email ) ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Looks like you forgot to provide a valid Email address!' );
                return false;
            }

            if ( password !== passwordverify ) {
                proceed_flag = false;
                $('.wpplugin-response-div-p').text( 'Whoops! Looks like your passwords don\'t match!' );
                $( '#wpplugin-user-password, #wpplugin-user-passwordverify' ).css({'color':'red'});
                return false;
            }

            if ( proceed_flag ) {

                $('.wpplugin-spinner').animate({'opacity':'1'});

                // Make Ajax call to get display options.
                var data = {
                    'action': 'wpplugintoplevel_add_new_user_action',
                    'security': wppluginToplevelPhpVariables.adminnonce2,
                    'username': username,
                    'password': password,
                    'firstname': firstname,
                    'lastname': lastname,
                    'contactstreetaddress': contactstreetaddress,
                    'contactcity': contactcity,
                    'contactstate': contactstate,
                    'contactzip': contactzip,
                    'phonecell': phonecell,
                    'phoneoffice': phoneoffice,
                    'email': email,
                    'userimage1': userimage1,
                    'userimage2': userimage2,
                    'comments': comments,
                    'location': 'frontend',
                };

                $.post( ajaxurl, data, function( response ) {
                    $('.wpplugin-spinner').animate({'opacity':'0'});

                    // Trying to use an already-registered email address or username.
                    if ( 'Whoops! Looks like someone is already registered with this Email Address!' === response ) {
                        $('.wpplugin-response-div-p').text( response );
                        return false;
                    }else if ( 'Whoops! Looks like this Username is already taken!' === response ) {
                        $('.wpplugin-response-div-p').text( response );
                        return false;
                    } else {
                        $('.wpplugin-response-div-p').text( 'Success! Please wait while we log you in...' );
                        setTimeout(function(){
                            window.location.href = window.location.href + '?un=' + response;
                        }, 5000)


                        
                    }

        
     

                });


            }


        });
    }

});
